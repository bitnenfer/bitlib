<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="bit::IAllocator">
    <DisplayString>{{ {Name,sb} }}</DisplayString>
  </Type>
  <Type Name="bit::TArray&lt;*&gt;">
    <DisplayString>{{ Count={Count}, Capacity={Capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator</Item>
      <Item Name="[Count]">Count</Item>
      <Item Name="[Capacity]">Capacity</Item>
      <ArrayItems>
        <Size>Count</Size>
        <ValuePointer>Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="bit::pmr::TArray&lt;*&gt;">
    <DisplayString>{{ Count={Count}, Capacity={Capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator,na</Item>
      <Item Name="[Count]">Count</Item>
      <Item Name="[Capacity]">Capacity</Item>
      <ArrayItems>
        <Size>Count</Size>
        <ValuePointer>Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="bit::TIntrusiveLinkedList&lt;*&gt;">
    <DisplayString>{{ Count={ Head->Count } }}</DisplayString>
    <Expand>
      <CustomListItems>
        <Variable Name="Link" InitialValue="Head->Next"/>
        <Size>Head->Count</Size>
        <Loop>
          <Break Condition="Link == Head"/>
          <Item>Link->Owner</Item>
          <Exec>Link=Link->Next</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="bit::TLinkedList&lt;*&gt;">
    <DisplayString>{{ Count={Count} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator</Item>
      <Item Name="[Count]">Count</Item>
      <LinkedListItems>
        <Size>Count</Size>
        <HeadPointer>Head</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="bit::pmr::TLinkedList&lt;*&gt;">
    <DisplayString>{{ Count={Count} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator,na</Item>
      <Item Name="[Count]">Count</Item>
      <LinkedListItems>
        <Size>Count</Size>
        <HeadPointer>Head</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="bit::CCommandArgEntry">
    <DisplayString Condition="Value!=nullptr">{{ {Name,sb} = {Value,sb} }}</DisplayString>
    <DisplayString>{{ {Name,sb} }}</DisplayString>
  </Type>
  <Type Name="bit::CCommandArgs">
    <DisplayString>{{ Count={Entries.Count} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Entries.Allocator,na</Item>
      <Item Name="[Count]">Entries.Count</Item>
      <ArrayItems>
        <Size>Entries.Count</Size>
        <ValuePointer>Entries.Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="bit::TKeyValue&lt;*,*&gt;">
    <DisplayString>({Key}, {Value})</DisplayString>
  </Type>
  <Type Name="bit::THashTable&lt;*&gt;">
    <DisplayString>{{ Count={ElementCount}, Capacity={BucketCount} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator</Item>
      <Item Name="[Count]">ElementCount</Item>
      <Item Name="[Capacity]">BucketCount</Item>
      <Item Name="[Hash]">Hasher</Item>
      <CustomListItems>
        <Variable Name="BucketElem" InitialValue="Buckets != nullptr ? Buckets[0].Container.Head : nullptr"/>
        <Variable Name="BucketIndex" InitialValue="0"/>
        <Size>ElementCount</Size>
        <Loop>
          <Break Condition="BucketIndex &gt;= BucketCount"/>
          <If Condition="Buckets[BucketIndex].Container.Count != 0">
            <Exec>BucketElem = Buckets[BucketIndex].Container.Head</Exec>
            <Loop>
              <Break Condition="BucketElem==nullptr"/>
              <Item Name="[{BucketElem->Element.Data.Key}]">BucketElem->Element.Data</Item>
              <Exec>BucketElem=BucketElem->Next</Exec>
            </Loop>
          </If>
          <Exec>BucketIndex++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="bit::pmr::THashTable&lt;*&gt;">
    <DisplayString>{{ Count={ElementCount}, Capacity={BucketCount} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator,na</Item>
      <Item Name="[Count]">ElementCount</Item>
      <Item Name="[Capacity]">BucketCount</Item>
      <Item Name="[Hash]">Hasher</Item>
      <CustomListItems>
        <Variable Name="BucketElem" InitialValue="Buckets != nullptr ? Buckets[0].Container.Head : nullptr"/>
        <Variable Name="BucketIndex" InitialValue="0"/>
        <Size>ElementCount</Size>
        <Loop>
          <Break Condition="BucketIndex &gt;= BucketCount"/>
          <If Condition="Buckets[BucketIndex].Container.Count != 0">
            <Exec>BucketElem = Buckets[BucketIndex].Container.Head</Exec>
            <Loop>
              <Break Condition="BucketElem==nullptr"/>
              <Item Name="[{BucketElem->Element.Data.Key}]">BucketElem->Element.Data</Item>
              <Exec>BucketElem=BucketElem->Next</Exec>
            </Loop>
          </If>
          <Exec>BucketIndex++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="bit::CScopeTimer">
    <DisplayString>{{ {TimerName,sb}, Start={StartTime} }}</DisplayString>
  </Type>
  <Type Name="bit::TAtomicRefCounter&lt;*&gt;">
    <DisplayString>{{ Ref Count={Counter} }}</DisplayString>
  </Type>
  <Type Name="bit::CMemoryArena">
    <DisplayString>{{ BaseAddress={BaseAddress,X}, Capacity={SizeInBytes} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]" Condition="Allocator != nullptr">*Allocator</Item>
      <Item Name="[RefCounter]" Condition="RefCounter != nullptr">*RefCounter</Item>
      <Item Name="[BaseAddress]">BaseAddress,X</Item>
      <Item Name="[SizeInBytes]">SizeInBytes</Item>
    </Expand>
  </Type>
  <Type Name="bit::CLinearAllocator">
    <DisplayString>{{ {Name,sb}, UsagePct={(float)BufferOffset / (float)Arena.SizeInBytes, g}% }}</DisplayString>
    <Expand>
      <Item Name="Arena">Arena</Item>
      <Item Name="Used">BufferOffset</Item>
    </Expand>
  </Type>
  <Type Name="bit::CVirtualAddressSpace">
    <DisplayString>{{ Range=[{BaseAddress,X}, {(uintptr_t)BaseAddress+ReservedSize,X}], UsagePct={(float)CommittedSize/(float)ReservedSize*100.0,g}% } }}</DisplayString>
    <Expand>
      <Item Name="[Start]">BaseAddress,X</Item>
      <Item Name="[End]">(uintptr_t)BaseAddress+ReservedSize,X</Item>
      <Item Name="[CommittedBytes]">CommittedSize</Item>
      <Item Name="[ReservedBytes]">ReservedSize</Item>
    </Expand>
  </Type>
  <Type Name="bit::CPageAllocator">
    <DisplayString>{{ {Name,sb}, UsagePct={(float)VirtualAddressSpace.CommittedSize/(float)VirtualAddressSpace.ReservedSize*100.0,g}% } }}</DisplayString>
    <Expand>
      <Item Name="[Name]">Name,sb</Item>
      <Item Name="[BaseAddress]">VirtualAddressSpace.BaseAddress,X</Item>
      <Item Name="[PageGranularity]">PageGranularity</Item>
      <Item Name="[CommittedPages]">VirtualAddressSpace.CommittedSize / PageGranularity</Item>
      <Item Name="[TotalPages]">PageCount</Item>
      <Item Name="[VirtualAddressSpace]">VirtualAddressSpace</Item>
    </Expand>
  </Type>
  <Type Name="bit::TFixedMemoryArena&lt;*&gt;">
    <DisplayString>{{  BaseAddress={BaseAddress,X}, Capacity={SizeInBytes} }}</DisplayString>
    <Expand>
      <Item Name="CapacityInBytes">sizeof(Data)</Item>
      <Item Name="Data">Data</Item>
    </Expand>
  </Type>
  <Type Name="bit::TControlBlock&lt;*&gt;">
    <DisplayString>{{ Strong={StrongRefCounter.Counter}, Weak={WeakRefCounter.Counter}, Ptr={Ptr}}</DisplayString>
  </Type>
  <Type Name="bit::TSharedPtr&lt;*&gt;">
    <DisplayString Condition="ControlBlock!=nullptr">{{ Strong={ControlBlock->StrongRefCounter.Counter}, Weak={ControlBlock->WeakRefCounter.Counter}, Ptr={ControlBlock->Ptr}}</DisplayString>
    <DisplayString>Empty</DisplayString>
    <Expand>
      <Item Condition="ControlBlock!=nullptr" Name="[Strong]">ControlBlock->StrongRefCounter.Counter</Item>
      <Item Condition="ControlBlock!=nullptr" Name="[Weak]">ControlBlock->WeakRefCounter.Counter</Item>
      <Item Condition="ControlBlock!=nullptr" Name="[Ptr]">ControlBlock->Ptr</Item>
    </Expand>
  </Type>
  <Type Name="bit::TUniquePtr&lt;*&gt;">
    <DisplayString Condition="Ptr != nullptr">{{ Ptr={Ptr} }}</DisplayString>
    <DisplayString>Empty</DisplayString>
  </Type>
  <Type Name="bit::TWeakPtr&lt;*&gt;">
    <DisplayString Condition="ControlBlock == nullptr">Empty</DisplayString>
    <DisplayString Condition="ControlBlock != nullptr &amp;&amp; ControlBlock->StrongRefCounter.Counter &lt;= 0">{{ Expired, Weak={ControlBlock->WeakRefCounter.Counter} }}</DisplayString>
    <DisplayString Condition="ControlBlock != nullptr">{{ Strong={ControlBlock->StrongRefCounter.Counter}, Weak={ControlBlock->WeakRefCounter.Counter}, Ptr={ControlBlock->Ptr}}</DisplayString>
    <Expand>
      <Item Condition="ControlBlock != nullptr &amp;&amp; ControlBlock->StrongRefCounter.Counter &gt; 0" Name="[Strong]">ControlBlock->StrongRefCounter.Counter</Item>
      <Item Condition="ControlBlock!=nullptr" Name="[Weak]">ControlBlock->WeakRefCounter.Counter</Item>
      <Item Condition="ControlBlock != nullptr &amp;&amp; ControlBlock->StrongRefCounter.Counter &gt; 0" Name="[Ptr]">ControlBlock->Ptr</Item>
    </Expand>  
  </Type>
  <Type Name="bit::CString">
    <DisplayString Condition="Storage.Count == 0">""</DisplayString>
    <DisplayString>{Storage.Data,s}</DisplayString>
    <Expand>
      <Item Name="Length" Condition="Storage.Count == 0">0</Item>
      <Item Name="Length">Storage.Count-1</Item>
      <Item Name="Storage">Storage</Item>
    </Expand>
  </Type>
</AutoVisualizer>