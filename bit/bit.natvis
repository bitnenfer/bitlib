<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="bit::IAllocator">
    <DisplayString>{{ {Name,sb} }}</DisplayString>
  </Type>
  <Type Name="bit::Array&lt;*&gt;">
    <DisplayString>{{ Count={Count}, Capacity={Capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator</Item>
      <Item Name="[Count]">Count</Item>
      <Item Name="[Capacity]">Capacity</Item>
      <ArrayItems>
        <Size>Count</Size>
        <ValuePointer>Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="bit::pmr::Array&lt;*&gt;">
    <DisplayString>{{ Count={Count}, Capacity={Capacity} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator,na</Item>
      <Item Name="[Count]">Count</Item>
      <Item Name="[Capacity]">Capacity</Item>
      <ArrayItems>
        <Size>Count</Size>
        <ValuePointer>Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="bit::IntrusiveLinkedList&lt;*&gt;">
    <DisplayString>{{ Count={ Head->Count } }}</DisplayString>
    <Expand>
      <CustomListItems>
        <Variable Name="Link" InitialValue="Head->Next"/>
        <Size>Head->Count</Size>
        <Loop>
          <Break Condition="Link == Head"/>
          <Item>Link->Owner</Item>
          <Exec>Link=Link->Next</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="bit::LinkedList&lt;*&gt;">
    <DisplayString>{{ Count={Count} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator</Item>
      <Item Name="[Count]">Count</Item>
      <LinkedListItems>
        <Size>Count</Size>
        <HeadPointer>Head</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="bit::pmr::LinkedList&lt;*&gt;">
    <DisplayString>{{ Count={Count} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator,na</Item>
      <Item Name="[Count]">Count</Item>
      <LinkedListItems>
        <Size>Count</Size>
        <HeadPointer>Head</HeadPointer>
        <NextPointer>Next</NextPointer>
        <ValueNode>Element</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="bit::CommandArgEntry">
    <DisplayString Condition="Value!=nullptr">{{ {Name,sb} = {Value,sb} }}</DisplayString>
    <DisplayString>{{ {Name,sb} }}</DisplayString>
  </Type>
  <Type Name="bit::CommandArgs">
    <DisplayString>{{ Count={Entries.Count} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Entries.Allocator,na</Item>
      <Item Name="[Count]">Entries.Count</Item>
      <ArrayItems>
        <Size>Entries.Count</Size>
        <ValuePointer>Entries.Data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="bit::KeyValue&lt;*,*&gt;">
    <DisplayString>({Key}, {Value})</DisplayString>
  </Type>
  <Type Name="bit::HashTable&lt;*&gt;">
    <DisplayString>{{ Count={ElementCount}, Capacity={BucketCount} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator</Item>
      <Item Name="[Count]">ElementCount</Item>
      <Item Name="[Capacity]">BucketCount</Item>
      <Item Name="[Hash]">Hasher</Item>
      <CustomListItems>
        <Variable Name="BucketElem" InitialValue="Buckets != nullptr ? Buckets[0].Container.Head : nullptr"/>
        <Variable Name="BucketIndex" InitialValue="0"/>
        <Size>ElementCount</Size>
        <Loop>
          <Break Condition="BucketIndex &gt;= BucketCount"/>
          <If Condition="Buckets[BucketIndex].Container.Count != 0">
            <Exec>BucketElem = Buckets[BucketIndex].Container.Head</Exec>
            <Loop>
              <Break Condition="BucketElem==nullptr"/>
              <Item Name="[{BucketElem->Element.Data.Key}]">BucketElem->Element.Data</Item>
              <Exec>BucketElem=BucketElem->Next</Exec>
            </Loop>
          </If>
          <Exec>BucketIndex++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="bit::pmr::HashTable&lt;*&gt;">
    <DisplayString>{{ Count={ElementCount}, Capacity={BucketCount} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]">Allocator,na</Item>
      <Item Name="[Count]">ElementCount</Item>
      <Item Name="[Capacity]">BucketCount</Item>
      <Item Name="[Hash]">Hasher</Item>
      <CustomListItems>
        <Variable Name="BucketElem" InitialValue="Buckets != nullptr ? Buckets[0].Container.Head : nullptr"/>
        <Variable Name="BucketIndex" InitialValue="0"/>
        <Size>ElementCount</Size>
        <Loop>
          <Break Condition="BucketIndex &gt;= BucketCount"/>
          <If Condition="Buckets[BucketIndex].Container.Count != 0">
            <Exec>BucketElem = Buckets[BucketIndex].Container.Head</Exec>
            <Loop>
              <Break Condition="BucketElem==nullptr"/>
              <Item Name="[{BucketElem->Element.Data.Key}]">BucketElem->Element.Data</Item>
              <Exec>BucketElem=BucketElem->Next</Exec>
            </Loop>
          </If>
          <Exec>BucketIndex++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="bit::ScopeTimer">
    <DisplayString>{{ {TimerName,sb}, Start={StartTime} }}</DisplayString>
  </Type>
  <Type Name="bit::AtomicRefCounter&lt;*&gt;">
    <DisplayString>{{ Ref Count={Counter} }}</DisplayString>
  </Type>
  <Type Name="bit::MemoryArena">
    <DisplayString>{{ BaseAddress={BaseAddress,X}, Capacity={SizeInBytes} }}</DisplayString>
    <Expand>
      <Item Name="[Allocator]" Condition="Allocator != nullptr">*Allocator</Item>
      <Item Name="[RefCounter]" Condition="RefCounter != nullptr">*RefCounter</Item>
      <Item Name="[BaseAddress]">BaseAddress,X</Item>
      <Item Name="[SizeInBytes]">SizeInBytes</Item>
    </Expand>
  </Type>
  <Type Name="bit::LinearAllocator">
    <DisplayString>{{ {Name,sb}, UsagePct={(float)BufferOffset / (float)Arena.SizeInBytes * 100.0f, g}% }}</DisplayString>
    <Expand>
      <Item Name="Arena">Arena</Item>
      <Item Name="Used">BufferOffset</Item>
    </Expand>
  </Type>
  <Type Name="bit::VirtualAddressSpace">
    <DisplayString>{{ Range=[{BaseAddress,X}, {(uintptr_t)BaseAddress+ReservedSize,X}], UsagePct={(float)CommittedSize/(float)ReservedSize*100.0,g}% } }}</DisplayString>
    <Expand>
      <Item Name="[Start]">BaseAddress,X</Item>
      <Item Name="[End]">(uintptr_t)BaseAddress+ReservedSize,X</Item>
      <Item Name="[CommittedBytes]">CommittedSize</Item>
      <Item Name="[ReservedBytes]">ReservedSize</Item>
    </Expand>
  </Type>
  <Type Name="bit::PageAllocator">
    <DisplayString>{{ {Name,sb}, UsagePct={(float)VirtualAddressSpace.CommittedSize/(float)VirtualAddressSpace.ReservedSize*100.0,g}% } }}</DisplayString>
    <Expand>
      <Item Name="[Name]">Name,sb</Item>
      <Item Name="[BaseAddress]">VirtualAddressSpace.BaseAddress,X</Item>
      <Item Name="[PageGranularity]">PageGranularity</Item>
      <Item Name="[CommittedPages]">VirtualAddressSpace.CommittedSize / PageGranularity</Item>
      <Item Name="[TotalPages]">PageCount</Item>
      <Item Name="[VirtualAddressSpace]">VirtualAddressSpace</Item>
    </Expand>
  </Type>
  <Type Name="bit::FixedMemoryArena&lt;*&gt;">
    <DisplayString>{{  BaseAddress={BaseAddress,X}, Capacity={SizeInBytes} }}</DisplayString>
    <Expand>
      <Item Name="CapacityInBytes">sizeof(Data)</Item>
      <Item Name="Data">Data</Item>
    </Expand>
  </Type>
  <Type Name="bit::ControlBlock&lt;*&gt;">
    <DisplayString>{{ Strong={StrongRefCounter.Counter}, Weak={WeakRefCounter.Counter}, Ptr={Ptr}}</DisplayString>
  </Type>
  <Type Name="bit::SharedPtr&lt;*&gt;">
    <DisplayString Condition="ControlBlock!=nullptr">{{ Strong={ControlBlock->StrongRefCounter.Counter}, Weak={ControlBlock->WeakRefCounter.Counter}, Ptr={ControlBlock->Ptr}}</DisplayString>
    <DisplayString>Empty</DisplayString>
    <Expand>
      <Item Condition="ControlBlock!=nullptr" Name="[Strong]">ControlBlock->StrongRefCounter.Counter</Item>
      <Item Condition="ControlBlock!=nullptr" Name="[Weak]">ControlBlock->WeakRefCounter.Counter</Item>
      <Item Condition="ControlBlock!=nullptr" Name="[Ptr]">ControlBlock->Ptr</Item>
    </Expand>
  </Type>
  <Type Name="bit::UniquePtr&lt;*&gt;">
    <DisplayString Condition="Ptr != nullptr">{{ Ptr={Ptr} }}</DisplayString>
    <DisplayString>Empty</DisplayString>
  </Type>
  <Type Name="bit::WeakPtr&lt;*&gt;">
    <DisplayString Condition="ControlBlock == nullptr">Empty</DisplayString>
    <DisplayString Condition="ControlBlock != nullptr &amp;&amp; ControlBlock->StrongRefCounter.Counter &lt;= 0">{{ Expired, Weak={ControlBlock->WeakRefCounter.Counter} }}</DisplayString>
    <DisplayString Condition="ControlBlock != nullptr">{{ Strong={ControlBlock->StrongRefCounter.Counter}, Weak={ControlBlock->WeakRefCounter.Counter}, Ptr={ControlBlock->Ptr}}</DisplayString>
    <Expand>
      <Item Condition="ControlBlock != nullptr &amp;&amp; ControlBlock->StrongRefCounter.Counter &gt; 0" Name="[Strong]">ControlBlock->StrongRefCounter.Counter</Item>
      <Item Condition="ControlBlock!=nullptr" Name="[Weak]">ControlBlock->WeakRefCounter.Counter</Item>
      <Item Condition="ControlBlock != nullptr &amp;&amp; ControlBlock->StrongRefCounter.Counter &gt; 0" Name="[Ptr]">ControlBlock->Ptr</Item>
    </Expand>  
  </Type>
  <Type Name="bit::String">
    <DisplayString Condition="Storage.Count == 0">""</DisplayString>
    <DisplayString>{Storage.Data,s}</DisplayString>
    <Expand>
      <Item Name="[Length]" Condition="Storage.Count == 0">0</Item>
      <Item Name="[Length]">Storage.Count-1</Item>
      <Item Name="[Storage]">Storage</Item>
    </Expand>
  </Type>
  <Type Name="bit::Tuple&lt;&gt;">
    <DisplayString>{{}}</DisplayString>
  </Type>

  <Type Name="bit::Tuple&lt;*&gt;">
    <DisplayString>{Value}</DisplayString>
    <Expand>
      <Item Name="[Value]">Value</Item>
    </Expand>
  </Type>
  
  <Type Name="bit::Tuple&lt;*,*&gt;">
    <DisplayString>{Value}, {*(BaseType_t*)this}</DisplayString>
    <Expand>
      <Item Name="[Value]">Value</Item>
      <ExpandedItem>*(BaseType_t*)this</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="bit::TLSFAllocator::BlockHeader">
    <DisplayString Condition="(Size &amp; 0b10) &gt; 0">{{ End of Pool }}</DisplayString>
    <DisplayString Condition="(Size &amp; 0b1) &gt; 0">{{ Size={ Size &amp; (~0b11) }, Free }}</DisplayString>
    <DisplayString>{{ Size={Size &amp; (~0b11)}, Used }}</DisplayString>
    <Expand HideRawView="1">
      <Item Condition="(Size &amp; 0b10) == 0" Name="[Size]">Size &amp; (~0b11)</Item>
      <Item Name="[Prev PhysBlock]">PrevPhysicalBlock</Item>
      <Item Condition="(Size &amp; 0b10) == 0" Name="[Next PhysBlock]">(bit::TLSFAllocator::BlockHeader*)((char*)this + sizeof(BlockHeader) + (Size &amp; (~0b11)))</Item>
    </Expand>
  </Type>

  <Type Name="bit::TLSFAllocator::BlockFreeHeader">
    <DisplayString Condition="(Size &amp; 0b10) &gt; 0">{{ End of Pool }}</DisplayString>
    <DisplayString Condition="(Size &amp; 0b1) &gt; 0 &amp;&amp; NextFree != nullptr &amp;&amp; PrevFree == nullptr">{{ Size={ Size &amp; (~0b11) }, Free, List Head }}</DisplayString>
    <DisplayString Condition="(Size &amp; 0b1) &gt; 0">{{ Size={ Size &amp; (~0b11) }, Free }}</DisplayString>
    <DisplayString>{{ Size={Size &amp; (~0b11)}, Used }}</DisplayString>
    <Expand HideRawView="1">
      <Item Condition="(Size &amp; 0b10) == 0" Name="[Size]">Size &amp; (~0b11)</Item>
      <Synthetic Condition="this != nullptr" Name="[Adjacent Blocks]">
        <Expand>
          <Item Name="[Prev]">PrevPhysicalBlock</Item>
          <Item Condition="(Size &amp; 0b10) == 0" Name="[Next]">(bit::TLSFAllocator::BlockHeader*)((char*)this + sizeof(BlockHeader) + (Size &amp; (~0b11)))</Item>
        </Expand>
      </Synthetic>
      <Synthetic Condition="PrevFree == nullptr &amp;&amp; NextFree != nullptr" Name="[Free List]">
        <Expand>
          <CustomListItems>
            <Variable Name="Node" InitialValue="this" />
            <Loop>
              <Break Condition="Node == nullptr"/>
              <Item>Node</Item>
              <Exec>Node = Node->NextFree</Exec>
            </Loop>
          </CustomListItems>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="bit::TLSFAllocator::MemoryPool">
    <DisplayString Condition="UsableSize &gt; 1024 * 1024 * 1024">{{ Size={(double)UsableSize / 1024.0 / 1024.0 / 1024.0,g} GiB }}</DisplayString>
    <DisplayString Condition="UsableSize &gt; 1024 * 1024">{{ Size={(double)UsableSize / 1024.0 / 1024.0,g} MiB }}</DisplayString>
    <DisplayString Condition="UsableSize &gt; 1024">{{ Size={(double)UsableSize / 1024.0,g} KiB }}</DisplayString>
    <DisplayString>{{ Size={(double)UsableSize,g} B }}</DisplayString>
    <Expand HideRawView="1">
      <Synthetic Name="[Available Space]" Condition="UsableSize &lt; 1024">
        <DisplayString>{ (double)UsableSize,g } B</DisplayString>
      </Synthetic>
      <Synthetic Name="[Available Space]" Condition="UsableSize &gt; 1024 &amp;&amp; UsableSize &lt; 1024 * 1024">
        <DisplayString>{ (double)UsableSize / 1024.0,g } KiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Available Space]" Condition="UsableSize &gt; 1024 * 1024 &amp;&amp; UsableSize &lt; 1024 * 1024 * 1024">
        <DisplayString>{ (double)UsableSize / 1024.0 / 1024.0,g } MiB</DisplayString>
      </Synthetic>
      <Item Name="[Base Address]">BaseAddress</Item>
      <Item Name="[Next Pool]">Next</Item>
    </Expand>
  </Type>

  <Type Name="bit::TLSFAllocator">
    <DisplayString Condition="AvailableSpaceInBytes &gt; 0 &amp;&amp; UsedSpaceInBytes &lt; 1024">{{ {Name,s}, UsagePct={(float)UsedSpaceInBytes / (float)AvailableSpaceInBytes * 100.0f, g}% }, Used={(double)UsedSpaceInBytes, g} B }</DisplayString>
    <DisplayString Condition="AvailableSpaceInBytes &gt; 0 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024">{{ {Name,s}, UsagePct={(float)UsedSpaceInBytes / (float)AvailableSpaceInBytes * 100.0f, g}% }, Used={(double)UsedSpaceInBytes / 1024.0,g} KiB }</DisplayString>
    <DisplayString Condition="AvailableSpaceInBytes &gt; 0 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024 * 1024">{{ {Name,s}, UsagePct={(float)UsedSpaceInBytes / (float)AvailableSpaceInBytes * 100.0f, g}% }, Used={(double)UsedSpaceInBytes / 1024.0 / 1024.0,g} MiB }</DisplayString>
    <DisplayString Condition="AvailableSpaceInBytes &gt; 0 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024 * 1024 * 1024">{{ {Name,s}, UsagePct={(float)UsedSpaceInBytes / (float)AvailableSpaceInBytes * 100.0f, g}% }, Used={(double)UsedSpaceInBytes / 1024.0 / 1024.0 / 1024.0,g} GiB }</DisplayString>
    <DisplayString Condition="AvailableSpaceInBytes &gt; 0">{{ {Name,s}, UsagePct={(float)UsedSpaceInBytes / (float)AvailableSpaceInBytes * 100.0f, g}% }}</DisplayString>
    <DisplayString>{{ {Name,s}, Empty }}</DisplayString>
    <Expand HideRawView="1">
      <Synthetic Name="[TLSF Config]">
        <DisplayString>[ Allocator Config ]</DisplayString>
        <Expand>
          <Item Name="Second Level Index">SLI</Item>
          <Item Name="First Level Count">FL_COUNT</Item>
          <Item Name="Second Level Count">SL_COUNT</Item>
          <Synthetic Name="Max Alloc Block">
            <DisplayString Condition="MAX_POOL_SIZE &gt;= 1024 * 1024 * 1024">{MAX_POOL_SIZE / 1024 / 1024 / 1024,u} GiB</DisplayString>
            <DisplayString Condition="MAX_POOL_SIZE &gt;= 1024 * 1024">{MAX_POOL_SIZE / 1024 / 1024,u} MiB</DisplayString>
            <DisplayString Condition="MAX_POOL_SIZE &gt;= 1024">{MAX_POOL_SIZE / 1024,u} KiB</DisplayString>
            <DisplayString>{MAX_POOL_SIZE,u}</DisplayString>
          </Synthetic>
          <Synthetic Name="Min Alloc Block">
            <DisplayString>{MIN_ALLOC_SIZE,u} B</DisplayString>
          </Synthetic>
        </Expand>
      </Synthetic>
      <Synthetic Name="[Used Space]" Condition="UsedSpaceInBytes &lt; 1024">
        <DisplayString>{ (double)UsedSpaceInBytes,g } B</DisplayString>
      </Synthetic>
      <Synthetic Name="[Used Space]" Condition="UsedSpaceInBytes &gt; 1024 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024">
        <DisplayString>{ (double)UsedSpaceInBytes / 1024.0,g } KiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Used Space]" Condition="UsedSpaceInBytes &gt; 1024 * 1024 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024 * 1024">
        <DisplayString>{ (double)UsedSpaceInBytes / 1024.0 / 1024.0,g } MiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Used Space]" Condition="UsedSpaceInBytes &gt; 1024 * 1024 * 1024 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024 * 1024 * 1024">
        <DisplayString>{ (double)UsedSpaceInBytes / 1024.0 / 1024.0 / 1024.0,g } GiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Available Space]" Condition="AvailableSpaceInBytes &lt; 1024">
        <DisplayString>{ (double)AvailableSpaceInBytes,g } B</DisplayString>
      </Synthetic>
      <Synthetic Name="[Available Space]" Condition="AvailableSpaceInBytes &gt; 1024 &amp;&amp; AvailableSpaceInBytes &lt; 1024 * 1024">
        <DisplayString>{ (double)AvailableSpaceInBytes / 1024.0,g } KiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Available Space]" Condition="AvailableSpaceInBytes &gt; 1024 * 1024 &amp;&amp; UsedSpaceInBytes &lt; 1024 * 1024 * 1024">
        <DisplayString>{ (double)AvailableSpaceInBytes / 1024.0 / 1024.0,g } MiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Available Space]" Condition="AvailableSpaceInBytes &gt; 1024 * 1024 * 1024 &amp;&amp; AvailableSpaceInBytes &lt; 1024 * 1024 * 1024 * 1024">
        <DisplayString>{ (double)AvailableSpaceInBytes / 1024.0 / 1024.0 / 1024.0,g } GiB</DisplayString>
      </Synthetic>
      <Synthetic Name="[Memory Pools]">
        <DisplayString>{{ Count={MemoryPoolCount,d} }}</DisplayString>
        <Expand>
          <LinkedListItems>
            <Size>MemoryPoolCount</Size>
            <HeadPointer>MemoryPoolList</HeadPointer>
            <NextPointer>Next</NextPointer>
            <ValueNode>*this</ValueNode>
          </LinkedListItems>
        </Expand>
      </Synthetic>
      
      <Synthetic Name="[Free List]">
        <DisplayString>[Level Bitmap &amp; Free Blocks]</DisplayString>
        <Expand>
          
          <Synthetic Name="[Free List Bitmap]">
            <Expand>
              <Item Name="[FL]">FLBitmap,bb</Item>
              <CustomListItems MaxItemsPerView="128">
                <Variable Name="FL" InitialValue="0ULL"/>
                <Variable Name="BlockSize" InitialValue="0ULL"/>
                <Loop Condition="FL &lt; FL_COUNT">
                  <Exec>BlockSize = (1ULL &lt;&lt; (FL+COUNT_OFFSET-1))</Exec>
                  <Item Condition="BlockSize &gt;= 1024 * 1024 * 1024 &amp;&amp; BlockSize &lt; 1024 * 1024 * 1024 * 1024" Name="[{FL}]  [{BlockSize/1024/1024/1024,u} GiB]">SLBitmap[FL],bb</Item>
                  <Item Condition="BlockSize &gt;= 1024 * 1024 &amp;&amp; BlockSize &lt; 1024 * 1024 * 1024" Name="[{FL}]  [{BlockSize/1024/1024,u} MiB]">SLBitmap[FL],bb</Item>
                  <Item Condition="BlockSize &gt;= 1024 &amp;&amp; BlockSize &lt; 1024 * 1024" Name="[{FL}]  [{BlockSize/1024,u} KiB]">SLBitmap[FL],bb</Item>
                  <Item Condition="BlockSize &lt; 1024" Name="[{FL}]  [{BlockSize,u} B]">SLBitmap[FL],bb</Item>
                  <Exec>FL += 1</Exec>
                </Loop>
              </CustomListItems>
            </Expand>
          </Synthetic>

          <Synthetic Name="[Free List Blocks]">
            <Expand>
              <CustomListItems MaxItemsPerView="128">
                <Variable Name="FL" InitialValue="0"/>
                <Variable Name="BlockSize" InitialValue="0"/>
                <Loop Condition="FL &lt; FL_COUNT">
                  <Exec>BlockSize = (1ULL &lt;&lt; (FL+COUNT_OFFSET-1))</Exec>
                  <Item Condition="BlockSize &gt;= 1024 * 1024 * 1024 &amp;&amp; BlockSize &lt; 1024 * 1024 * 1024 * 1024" Name="[{FL}]  [{BlockSize/1024/1024/1024,u} GiB]">FreeBlocks[FL],na</Item>
                  <Item Condition="BlockSize &gt;= 1024 * 1024 &amp;&amp; BlockSize &lt; 1024 * 1024 * 1024" Name="[{FL}]  [{BlockSize/1024/1024,u} MiB]">FreeBlocks[FL],na</Item>
                  <Item Condition="BlockSize &gt;= 1024 &amp;&amp; BlockSize &lt; 1024 * 1024" Name="[{FL}]  [{BlockSize/1024,u} KiB]">FreeBlocks[FL],na</Item>
                  <Item Condition="BlockSize &lt; 1024" Name="[{FL}]  [{BlockSize,u} B]">FreeBlocks[FL],na</Item>
                  <Exec>FL += 1</Exec>
                </Loop>
              </CustomListItems>
            </Expand>
          </Synthetic>
          
        </Expand>
      </Synthetic>
    </Expand>
  </Type>
</AutoVisualizer>